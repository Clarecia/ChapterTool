<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Message_ChapterTool_Error" xml:space="preserve">
    <value>ChapterTool Error</value>
  </data>
  <data name="File_Unloaded" xml:space="preserve">
    <value>File unloaded</value>
  </data>
  <data name="Tips_Load_Success" xml:space="preserve">
    <value>Load Success (≧▽≦)</value>
  </data>
  <data name="Tips_Chapter_Not_find" xml:space="preserve">
    <value>No chapter in current clip (¬_¬)</value>
  </data>
  <data name="Log_Hard_Drive_Plz" xml:space="preserve">
    <value>Such Hard Disks, Do you willing to give me one?</value>
  </data>
  <data name="Log_Hello" xml:space="preserve">
    <value>, Hello</value>
  </data>
  <data name="Message_How_Can_You_Find_Here" xml:space="preserve">
    <value>Hello, How Can You Find Here</value>
  </data>
  <data name="Tips_IFO_Waring" xml:space="preserve">
    <value>Please note wether the IFO need to fix time</value>
  </data>
  <data name="Tips_InValid_Type" xml:space="preserve">
    <value>Unrecognizable file type _ (:3」∠)_</value>
  </data>
  <data name="Tips_InValid_Type_Log" xml:space="preserve">
    <value>Invalid file type</value>
  </data>
  <data name="Message_ChapterTool_Info" xml:space="preserve">
    <value>ChapterTool Information</value>
  </data>
  <data name="Message_Open_With_CT" xml:space="preserve">
    <value>Open .mpls file with ChapterTool？</value>
  </data>
  <data name="ToolTips_Useless_Chapter" xml:space="preserve">
    <value>The second time stamp is too close to the end of clip, may be useless(-｡-;)</value>
  </data>
  <data name="File_Filter_All" xml:space="preserve">
    <value>All Files</value>
  </data>
  <data name="File_Filter_All_Support" xml:space="preserve">
    <value>All Support Types</value>
  </data>
  <data name="File_Filter_Chapter_File" xml:space="preserve">
    <value>Chapter File</value>
  </data>
  <data name="File_Filter_Cue_File" xml:space="preserve">
    <value>Cue File[Include embedded]</value>
  </data>
  <data name="File_Filter_Matroska_File" xml:space="preserve">
    <value>Matroska File</value>
  </data>
  <data name="File_Filter_Mp4_File" xml:space="preserve">
    <value>Mp4 File</value>
  </data>
  <data name="File_Filter_Text" xml:space="preserve">
    <value>Text File</value>
  </data>
  <data name="Log_Load_File_Via_Dragging" xml:space="preserve">
    <value>Load file via dragging: {0}</value>
  </data>
  <data name="Log_Load_Position_Successful" xml:space="preserve">
    <value>+Load form position {0}</value>
  </data>
  <data name="Log_Wu_Zong" xml:space="preserve">
    <value>Hello, WuZong</value>
  </data>
  <data name="Log_About_Form_Click" xml:space="preserve">
    <value>Progress bar has been clicked {0} times</value>
  </data>
  <data name="Log_About_Form_Click_Reset" xml:space="preserve">
    <value>Counter of progress bar reseted</value>
  </data>
  <data name="Log_About_Form_Opened" xml:space="preserve">
    <value>About form opened</value>
  </data>
  <data name="Log_Boot_Count" xml:space="preserve">
    <value>The {0}th open the Chapter Tool.</value>
  </data>
  <data name="Log_Chapter_Name_Template" xml:space="preserve">
    <value>+Load Chapter name template: {0}</value>
  </data>
  <data name="Log_Color_Setting_Form_Open" xml:space="preserve">
    <value>Color setting form opened</value>
  </data>
  <data name="Log_Convert_TimeStamp_Count" xml:space="preserve">
    <value>  |+Include {0} time stamps</value>
  </data>
  <data name="Log_FPS_Detect_Begin" xml:space="preserve">
    <value>|+Auto FPS detect begin，acceptable deviation: {0}</value>
  </data>
  <data name="Log_FPS_Detect_Count" xml:space="preserve">
    <value> | {0:D2} accuracy points</value>
  </data>
  <data name="Log_FPS_Detect_Result" xml:space="preserve">
    <value>|Auto FPS detect result {0:F4} fps</value>
  </data>
  <data name="Log_IFO_Clip_Count" xml:space="preserve">
    <value>|+{0} clip in IFO</value>
  </data>
  <data name="Log_Load_File_Via_Args" xml:space="preserve">
    <value>Load file via argument: {0}</value>
  </data>
  <data name="Log_Load_File_Via_Button" xml:space="preserve">
    <value>Load file via button: {0}</value>
  </data>
  <data name="Log_Mp4v2_Not_Find" xml:space="preserve">
    <value>No available libmp4v2.dll, Download it right now?</value>
  </data>
  <data name="Log_MPLS_Clip_Count" xml:space="preserve">
    <value>|+{0} m2ts clips in MPLS</value>
  </data>
  <data name="Log_MPLS_Load_Success" xml:space="preserve">
    <value>+Load MPLS chapter success</value>
  </data>
  <data name="Log_Rename" xml:space="preserve">
    <value>+Rename: {0} -&gt; {1}</value>
  </data>
  <data name="Log_Resolution" xml:space="preserve">
    <value>, Resolution: </value>
  </data>
  <data name="Log_Row_Delete" xml:space="preserve">
    <value>+ {0} rows(i = {1})been deleted</value>
  </data>
  <data name="Log_Save_Chapter_Order_Shift" xml:space="preserve">
    <value>|+Chapter order shift: {0}</value>
  </data>
  <data name="Log_Save_Correspond_File" xml:space="preserve">
    <value>|+Corresponding file: {0}</value>
  </data>
  <data name="Log_Save_File_Name" xml:space="preserve">
    <value>|+Save file name: {0}</value>
  </data>
  <data name="Log_Save_Info" xml:space="preserve">
    <value>+Save info</value>
  </data>
  <data name="Log_Save_Is_Use_Chapter_Name" xml:space="preserve">
    <value>|+Use chapter name: {0}</value>
  </data>
  <data name="Log_Save_Is_Use_Chapter_Name_Template" xml:space="preserve">
    <value> |+Use chapter name template: {0}</value>
  </data>
  <data name="Log_Save_Language" xml:space="preserve">
    <value>  |+Selected language: {0}</value>
  </data>
  <data name="Log_Save_Time_Factor" xml:space="preserve">
    <value>|+Starting time x 1.001: {0}</value>
  </data>
  <data name="Log_Save_Time_Shift" xml:space="preserve">
    <value>|+Use Time Shift: {0}</value>
  </data>
  <data name="Log_Save_Time_Shift_Amount" xml:space="preserve">
    <value> |+Amount {0}</value>
  </data>
  <data name="Log_Save_Type" xml:space="preserve">
    <value> |+Saving type: {0}</value>
  </data>
  <data name="Log_Set_Saving_Path" xml:space="preserve">
    <value>Set saving path as: {0}</value>
  </data>
  <data name="Log_TimeStamp_Count" xml:space="preserve">
    <value>  |+Include {0} time stamps</value>
  </data>
  <data name="Log_Update_Checked" xml:space="preserve">
    <value>Update checked</value>
  </data>
  <data name="Log_Update_Skiped" xml:space="preserve">
    <value>Skip Update checking</value>
  </data>
  <data name="Log_Without_Admin" xml:space="preserve">
    <value>Oh~, I'm not the administrator</value>
  </data>
  <data name="Log_With_Admin" xml:space="preserve">
    <value>Wow ( •̀ ω •́ )y, I can do some thing naive!</value>
  </data>
  <data name="Log_XPL_Clip_Count" xml:space="preserve">
    <value>|+{0} clips in XPL</value>
  </data>
  <data name="Menu_Open_File" xml:space="preserve">
    <value>Open {0}</value>
  </data>
  <data name="Tips_Clip_Count" xml:space="preserve">
    <value> {0} Clips</value>
  </data>
  <data name="Tips_Invalid_Shift_Time" xml:space="preserve">
    <value>Invalid shift time</value>
  </data>
  <data name="Tips_Menu_Clip" xml:space="preserve">
    <value>It should be a menu</value>
  </data>
  <data name="Tips_Save_Fail" xml:space="preserve">
    <value>Save failed</value>
  </data>
  <data name="Tips_Save_Success" xml:space="preserve">
    <value>Save success</value>
  </data>
  <data name="Message_Unable_To_Read_Mp4_File" xml:space="preserve">
    <value>Unable to read mp4 info</value>
  </data>
  <data name="Update_Check" xml:space="preserve">
    <value>Check &amp;Update</value>
  </data>
</root>